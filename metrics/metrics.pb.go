// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Measure_Type int32

const (
	Measure_GAUGE     Measure_Type = 0
	Measure_COUNTER   Measure_Type = 1
	Measure_HISTOGRAM Measure_Type = 2
	Measure_SUMMARY   Measure_Type = 3
)

var Measure_Type_name = map[int32]string{
	0: "GAUGE",
	1: "COUNTER",
	2: "HISTOGRAM",
	3: "SUMMARY",
}
var Measure_Type_value = map[string]int32{
	"GAUGE":     0,
	"COUNTER":   1,
	"HISTOGRAM": 2,
	"SUMMARY":   3,
}

func (x Measure_Type) String() string {
	return proto.EnumName(Measure_Type_name, int32(x))
}
func (Measure_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dadcb04d295a7d14, []int{0, 0}
}

type Measure struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                float32      `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Help                 string       `protobuf:"bytes,3,opt,name=help,proto3" json:"help,omitempty"`
	Kind                 Measure_Type `protobuf:"varint,4,opt,name=kind,proto3,enum=metrics.Measure_Type" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Measure) Reset()         { *m = Measure{} }
func (m *Measure) String() string { return proto.CompactTextString(m) }
func (*Measure) ProtoMessage()    {}
func (*Measure) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dadcb04d295a7d14, []int{0}
}
func (m *Measure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Measure.Unmarshal(m, b)
}
func (m *Measure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Measure.Marshal(b, m, deterministic)
}
func (dst *Measure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Measure.Merge(dst, src)
}
func (m *Measure) XXX_Size() int {
	return xxx_messageInfo_Measure.Size(m)
}
func (m *Measure) XXX_DiscardUnknown() {
	xxx_messageInfo_Measure.DiscardUnknown(m)
}

var xxx_messageInfo_Measure proto.InternalMessageInfo

func (m *Measure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Measure) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Measure) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *Measure) GetKind() Measure_Type {
	if m != nil {
		return m.Kind
	}
	return Measure_GAUGE
}

type GatewaySummary struct {
	MeasureCount         int32    `protobuf:"varint,1,opt,name=measure_count,json=measureCount,proto3" json:"measure_count,omitempty"`
	ElapsedTime          int32    `protobuf:"varint,2,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewaySummary) Reset()         { *m = GatewaySummary{} }
func (m *GatewaySummary) String() string { return proto.CompactTextString(m) }
func (*GatewaySummary) ProtoMessage()    {}
func (*GatewaySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_dadcb04d295a7d14, []int{1}
}
func (m *GatewaySummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewaySummary.Unmarshal(m, b)
}
func (m *GatewaySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewaySummary.Marshal(b, m, deterministic)
}
func (dst *GatewaySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewaySummary.Merge(dst, src)
}
func (m *GatewaySummary) XXX_Size() int {
	return xxx_messageInfo_GatewaySummary.Size(m)
}
func (m *GatewaySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewaySummary.DiscardUnknown(m)
}

var xxx_messageInfo_GatewaySummary proto.InternalMessageInfo

func (m *GatewaySummary) GetMeasureCount() int32 {
	if m != nil {
		return m.MeasureCount
	}
	return 0
}

func (m *GatewaySummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Measure)(nil), "metrics.Measure")
	proto.RegisterType((*GatewaySummary)(nil), "metrics.GatewaySummary")
	proto.RegisterEnum("metrics.Measure_Type", Measure_Type_name, Measure_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsClient interface {
	AddMeasure(ctx context.Context, opts ...grpc.CallOption) (Metrics_AddMeasureClient, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) AddMeasure(ctx context.Context, opts ...grpc.CallOption) (Metrics_AddMeasureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Metrics_serviceDesc.Streams[0], "/metrics.Metrics/AddMeasure", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsAddMeasureClient{stream}
	return x, nil
}

type Metrics_AddMeasureClient interface {
	Send(*Measure) error
	CloseAndRecv() (*GatewaySummary, error)
	grpc.ClientStream
}

type metricsAddMeasureClient struct {
	grpc.ClientStream
}

func (x *metricsAddMeasureClient) Send(m *Measure) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsAddMeasureClient) CloseAndRecv() (*GatewaySummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GatewaySummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServer is the server API for Metrics service.
type MetricsServer interface {
	AddMeasure(Metrics_AddMeasureServer) error
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_AddMeasure_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServer).AddMeasure(&metricsAddMeasureServer{stream})
}

type Metrics_AddMeasureServer interface {
	SendAndClose(*GatewaySummary) error
	Recv() (*Measure, error)
	grpc.ServerStream
}

type metricsAddMeasureServer struct {
	grpc.ServerStream
}

func (x *metricsAddMeasureServer) SendAndClose(m *GatewaySummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsAddMeasureServer) Recv() (*Measure, error) {
	m := new(Measure)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddMeasure",
			Handler:       _Metrics_AddMeasure_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "metrics.proto",
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_metrics_dadcb04d295a7d14) }

var fileDescriptor_metrics_dadcb04d295a7d14 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0x64, 0xa1, 0x95, 0xf0, 0xf8, 0x48, 0xb3, 0xd1, 0xd8, 0x78, 0xc2, 0x7a, 0xa9, 0x1e, 0x7a,
	0xc0, 0x9b, 0x9e, 0x0a, 0xc1, 0xea, 0xa1, 0x42, 0x96, 0x92, 0xe8, 0x89, 0xac, 0xf4, 0x45, 0x1b,
	0xbb, 0x74, 0xd3, 0x0f, 0x95, 0x3f, 0xe5, 0x6f, 0x34, 0xbb, 0xb4, 0x26, 0x7a, 0x7b, 0x33, 0x3b,
	0xd9, 0x99, 0x79, 0x0f, 0x86, 0x02, 0xcb, 0x3c, 0xd9, 0x16, 0x9e, 0xcc, 0xb3, 0x32, 0xa3, 0xdd,
	0x1a, 0x3a, 0xdf, 0x04, 0xba, 0x21, 0xf2, 0xa2, 0xca, 0x91, 0x52, 0x30, 0x76, 0x5c, 0xa0, 0x4d,
	0xc6, 0xc4, 0xed, 0x31, 0x3d, 0xd3, 0x63, 0x30, 0x3f, 0x78, 0x5a, 0xa1, 0xdd, 0x1e, 0x13, 0xb7,
	0xcd, 0x0e, 0x40, 0x29, 0xdf, 0x30, 0x95, 0x76, 0xe7, 0xa0, 0x54, 0x33, 0xbd, 0x04, 0xe3, 0x3d,
	0xd9, 0xc5, 0xb6, 0x31, 0x26, 0xee, 0x68, 0x72, 0xe2, 0x35, 0x86, 0xf5, 0xef, 0x5e, 0xb4, 0x97,
	0xc8, 0xb4, 0xc4, 0xb9, 0x01, 0x43, 0x21, 0xda, 0x03, 0x33, 0xf0, 0xd7, 0xc1, 0xdc, 0x6a, 0xd1,
	0x3e, 0x74, 0x67, 0x8b, 0xf5, 0x63, 0x34, 0x67, 0x16, 0xa1, 0x43, 0xe8, 0xdd, 0x3f, 0xac, 0xa2,
	0x45, 0xc0, 0xfc, 0xd0, 0x6a, 0xab, 0xb7, 0xd5, 0x3a, 0x0c, 0x7d, 0xf6, 0x6c, 0x75, 0x9c, 0x27,
	0x18, 0x05, 0xbc, 0xc4, 0x4f, 0xbe, 0x5f, 0x55, 0x42, 0xf0, 0x7c, 0x4f, 0x2f, 0x54, 0x39, 0xed,
	0xb1, 0xd9, 0x66, 0xd5, 0xae, 0xd4, 0xf9, 0x4d, 0x36, 0xa8, 0xc9, 0x99, 0xe2, 0xe8, 0x39, 0x0c,
	0x30, 0xe5, 0xb2, 0xc0, 0x78, 0x53, 0x26, 0xe2, 0x50, 0xc7, 0x64, 0xfd, 0x9a, 0x8b, 0x12, 0x81,
	0x93, 0x3b, 0xb5, 0x09, 0x9d, 0x99, 0xde, 0x02, 0xf8, 0x71, 0xdc, 0xec, 0xc5, 0xfa, 0xdf, 0xe5,
	0xec, 0xf4, 0x97, 0xf9, 0x9b, 0xc5, 0x69, 0xb9, 0x64, 0x7a, 0x05, 0x76, 0x92, 0x79, 0xaf, 0xb9,
	0xdc, 0x7a, 0xf8, 0xc5, 0x85, 0x4c, 0xb1, 0x68, 0xe4, 0xd3, 0x41, 0xed, 0xb0, 0x54, 0x57, 0x58,
	0x92, 0x97, 0x23, 0x7d, 0x8e, 0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x56, 0x9b, 0x39,
	0x9f, 0x01, 0x00, 0x00,
}
